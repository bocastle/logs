# 워크플로우 이름 정의
name: Sync Markdown from Dropbox

# 워크플로우 실행 조건 설정
on:
  # 매일 UTC 기준 오후 12시(한국시간 오후 9시)에 실행
  schedule:
    - cron: "0 12 * * *" # UTC 기준으로 오후 9시 (한국시간)
  # 수동으로도 실행 가능하도록 설정
  workflow_dispatch:

# 작업 정의
jobs:
  sync-md-file:
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Git 설정
      - name: Set up Git config
        run: |
          git config --global user.name "김보성"
          git config --global user.email "bocastle1213@gmail.com"

      # 3. 오늘 날짜 계산 (YYYY_MM_DD 형식)
      - name: Calculate today's date
        id: time
        run: |
          echo "DATE=$(date +'%Y_%m_%d')" >> $GITHUB_ENV

      # 4. Dropbox에서 마크다운 파일 다운로드
      - name: Download Markdown files from Dropbox
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DATE: ${{ env.DATE }}
        run: |
          DATE=${{ env.DATE }}
          echo "Checking Dropbox for /$DATE"

          # 토큰 관리 함수들
          get_access_token() {
            echo "Getting new access token..."
            response=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
              -d grant_type=client_credentials \
              -d client_id=$DROPBOX_APP_KEY \
              -d client_secret=$DROPBOX_APP_SECRET)
            
            access_token=$(echo "$response" | jq -r '.access_token')
            if [ "$access_token" != "null" ]; then
              echo "Access token obtained successfully"
              export DROPBOX_ACCESS_TOKEN=$access_token
            else
              echo "Failed to get access token"
              exit 1
            fi
          }

          # 초기 액세스 토큰 획득
          get_access_token

          # Dropbox API 호출
          response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
            --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --data "{\"path\": \"/$DATE\"}")

          # 토큰 만료 체크 (401 에러)
          if [[ "$response" == *"error"* && "$response" == *"401"* ]]; then
            echo "Token expired, getting new token..."
            get_access_token
            
            # 새로운 토큰으로 다시 시도
            response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
              --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              --data "{\"path\": \"/$DATE\"}")
          fi

          echo "API Response: $response"

          # 파일 목록이 있는지 확인
          FILE_LIST=$(echo "$response" | jq -r '.entries[].name')
          if [ -z "$FILE_LIST" ]; then
            echo "No files found or API error."
            exit 0
          else
            echo "Files found:"
            echo "$FILE_LIST"
          fi

          # 파일 목록을 배열로 변환하여 처리
          IFS=$'\n' read -rd '' -a FILE_ARRAY <<< "$FILE_LIST" || true
          for FILE in "${FILE_ARRAY[@]}"; do
            echo "Checking file: $FILE"
            # .md 파일만 처리
            if [[ $FILE =~ \.md$ ]]; then
              echo "Found file: $FILE"
              
              # Dropbox에서 파일 다운로드
              curl -X POST https://content.dropboxapi.com/2/files/download \
                --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
                --header "Dropbox-API-Arg: {\"path\": \"/$DATE/$FILE\"}" \
                --output temp.md || { echo "File download failed for $FILE"; exit 1; }
              
              # 파일명에서 카테고리, 제목, 번호 추출 (CATEGORY_TITLE_Number 형식)
              CATEGORY=$(echo "$FILE" | cut -d'_' -f1)
              TITLE=$(echo "$FILE" | cut -d'_' -f2)
              NUMBER=$(echo "$FILE" | cut -d'_' -f3 | sed 's/.md//')
              
              echo "Category: $CATEGORY"
              echo "Title: $TITLE"
              echo "Number: $NUMBER"

              # 다운로드된 파일이 존재하면 적절한 위치로 이동
              if [ -f temp.md ]; then
                echo "temp.md exists, moving file..."
                mkdir -p "$CATEGORY"
                # 파일명을 CATEGORY/Title.md 형식으로 저장 (_Number 부분 제거)
                mv temp.md "$CATEGORY/${TITLE}.md"
                git add "$CATEGORY/${TITLE}.md"
              else
                echo "temp.md does not exist, skipping move"
              fi
            else
              echo "File did not match: $FILE"
            fi
          done

      # 5. 변경사항이 있으면 커밋하고 푸시
      - name: Commit and Push if files exist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git diff --cached --exit-code; then
            echo "No changes to commit"
          else
            git commit -m "feat: ${TITLE}"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/bocastle/logs.git main
          fi
