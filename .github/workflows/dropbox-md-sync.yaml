# 워크플로우 이름 정의
name: Sync Markdown from Dropbox

# 워크플로우 실행 조건 설정
on:
  # 매일 UTC 기준 오후 12시(한국시간 오후 9시)에 실행
  schedule:
    - cron: "0 12 * * *" # UTC 기준으로 오후 9시 (한국시간)
  # 수동으로도 실행 가능하도록 설정
  workflow_dispatch:

# 작업 정의
jobs:
  sync-md-file:
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Git 설정
      - name: Set up Git config
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      # 3. 오늘 날짜 계산 (YYYY_MM_DD 형식)
      - name: Calculate today's date
        id: time
        run: |
          echo "DATE=$(date +'%Y_%m_%d')" >> $GITHUB_ENV

      # 4. Dropbox에서 마크다운 파일 다운로드
      - name: Get Dropbox Access Token and Sync Files
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          # Function to get access token
          get_access_token() {
            local response=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
              -d grant_type=refresh_token \
              -d refresh_token=$DROPBOX_REFRESH_TOKEN \
              -u "$DROPBOX_APP_KEY:$DROPBOX_APP_SECRET")
            
            local token=$(echo "$response" | jq -r '.access_token')
            if [ "$token" == "null" ]; then
              echo "Failed to refresh access token"
              return 1
            fi
            echo "$token"
          }

          # Get initial access token
          DROPBOX_ACCESS_TOKEN=$(get_access_token) || exit 1

          # Function to list files with retry
          list_files() {
            local response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
              --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              --data "{\"path\": \"/$DATE\"}")
            
            if [[ "$response" == *"error"* && "$response" == *"401"* ]]; then
              echo "Token expired, refreshing..."
              DROPBOX_ACCESS_TOKEN=$(get_access_token) || exit 1
              response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
                --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"path\": \"/$DATE\"}")
            fi
            echo "$response"
          }

          # Get file list
          response=$(list_files)
          if [ $? -ne 0 ]; then
            echo "Failed to list files"
            exit 1
          fi

          # Process files
          FILE_LIST=$(echo "$response" | jq -r '.entries[].name')
          if [ -z "$FILE_LIST" ]; then
            echo "No files found in Dropbox for date $DATE"
            exit 0
          fi

          # Process each file
          IFS=$'\n' read -rd '' -a FILE_ARRAY <<< "$FILE_LIST" || true
          for FILE in "${FILE_ARRAY[@]}"; do
            if [[ $FILE =~ \.md$ ]]; then
              echo "Processing file: $FILE"
              
              # Download file
              if ! curl -s -X POST https://content.dropboxapi.com/2/files/download \
                --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
                --header "Dropbox-API-Arg: {\"path\": \"/$DATE/$FILE\"}" \
                --output temp.md; then
                echo "Failed to download file: $FILE"
                continue
              fi
              
              # Parse filename (more robust approach)
              if [[ $FILE =~ ^([^_]+)_([^_]+)_([0-9]+)\.md$ ]]; then
                CATEGORY="${BASH_REMATCH[1]}"
                TITLE="${BASH_REMATCH[2]}"
                NUMBER="${BASH_REMATCH[3]}"
                
                echo "Category: $CATEGORY"
                echo "Title: $TITLE"
                echo "Number: $NUMBER"

                # Move file
                if [ -f temp.md ]; then
                  mkdir -p "$CATEGORY"
                  mv temp.md "$CATEGORY/${TITLE}.md"
                  git add "$CATEGORY/${TITLE}.md"
                  echo "Added file: $CATEGORY/${TITLE}.md"
                fi
              else
                echo "Invalid filename format: $FILE"
                rm -f temp.md
              fi
            fi
          done

      # 5. 변경사항이 있으면 커밋하고 푸시
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git diff --cached --exit-code; then
            echo "No changes to commit"
          else
            git commit -m "feat: Sync markdown files from Dropbox for $DATE"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/bocastle/logs.git main
          fi
