name: Get Dropbox Refresh Token

on:
  workflow_dispatch:
    inputs:
      auth_code:
        description: "Dropbox Authorization Code"
        required: true
        type: string

jobs:
  get-token:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dropbox requests

      - name: Generate Refresh Token
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          AUTH_CODE: ${{ github.event.inputs.auth_code }}
        run: |
          python - <<EOF
          import requests
          import os
          import sys
          import base64

          # Get credentials from environment variables
          APP_KEY = os.environ.get('DROPBOX_APP_KEY')
          APP_SECRET = os.environ.get('DROPBOX_APP_SECRET')
          AUTH_CODE = os.environ.get('AUTH_CODE')

          if not all([APP_KEY, APP_SECRET, AUTH_CODE]):
              print("Error: Missing required environment variables")
              sys.exit(1)

          try:
              # Create base64 encoded client credentials
              client_credentials = base64.b64encode(f"{APP_KEY}:{APP_SECRET}".encode()).decode()
              
              # Make the token request
              response = requests.post(
                  'https://api.dropbox.com/oauth2/token',
                  headers={
                      'Authorization': f'Basic {client_credentials}',
                      'Content-Type': 'application/x-www-form-urlencoded'
                  },
                  data={
                      'grant_type': 'authorization_code',
                      'code': AUTH_CODE,
                      'client_id': APP_KEY
                  }
              )
              
              # Check if request was successful
              response.raise_for_status()
              
              # Parse the response
              token_data = response.json()
              
              print("\n=== Dropbox Token Information ===")
              print("Access Token:", token_data.get('access_token'))
              print("Refresh Token:", token_data.get('refresh_token'))
              print("\nPlease add the Refresh Token to your GitHub Secrets as DROPBOX_REFRESH_TOKEN")
              
          except requests.exceptions.RequestException as e:
              print("Error:", str(e))
              if hasattr(e.response, 'text'):
                  print("Response:", e.response.text)
              sys.exit(1)
          EOF

      - name: Get Authorization URL
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
        run: |
          echo "To get the authorization code:"
          echo "1. Visit this URL: https://www.dropbox.com/oauth2/authorize?client_id=$DROPBOX_APP_KEY&response_type=code&token_access_type=offline"
          echo "2. Log in to Dropbox and authorize the app"
          echo "3. Copy the authorization code (the code parameter from the URL)"
          echo "4. Run this workflow again with the authorization code"
